version : 2.1

orbs:
  sfdx: circleci/salesforce-sfdx@2.1.0

executors:
  sfdx-default:
    docker:
      - image: cimg/base:2020.01

jobs:
  scratch_org_test:
    executor:
      name: sfdx-default
    steps:
      - checkout
      - sfdx/install
      - run:
          name: Setup SFDX CLI
          command: |
            echo $SFDX_JWT_KEY | base64 --decode --ignore-garbage > ./server.key
            sfdx auth:jwt:grant --clientid $SFDX_CONSUMER_KEY --jwtkeyfile server.key --username $USERNAME_PRODUCTION
            mkdir -p force-app
      - run:
          name: Run Org Setup
          command: |
            bash scripts/setup/macOS.sh -a CircleCi -v $USERNAME_PRODUCTION
      - run:
          name: Run Tests (Scratch Org)
          command: |
            mkdir -p ~/test-results/apex
            export SFDX_IMPROVED_CODE_COVERAGE="true"
            sfdx force:apex:test:run -w 10 -r junit -d ~/test-results/apex -c
      - run:
          name: Clean Scratch Org
          command: |
            sfdx force:org:delete -u CircleCi --noprompt
          when: always
      - run:
          name: Clean Duplicate Test Results
          command: |
            rm -f ~/test-results/apex/test-result.xml
          when: always
      - store_test_results:
          path: ~/test-results

  build_and_install_staging: 
    executor:
      name: sfdx-default
    steps:
      - checkout
      - sfdx/install
      - run:
          name: Setup SFDX CLI
          command: |
            echo $SFDX_JWT_KEY | base64 --decode --ignore-garbage > ./server.key
            sfdx auth:jwt:grant --clientid $SFDX_CONSUMER_KEY --jwtkeyfile server.key --username $USERNAME_PRODUCTION
            sfdx auth:jwt:grant --clientid $SFDX_CONSUMER_KEY_STAGING --jwtkeyfile server.key --username $USERNAME_STAGING --instanceurl https://test.salesforce.com
            mkdir -p force-app
      - run:
          name: Build Beta Package
          command: |
            sfdx force:package:version:create -p $PACKAGE_ID -v $USERNAME_PRODUCTION -w 60 -k $INSTALLATION_KEY --skipvalidation
      - run:
          name: Install Package (Staging)
          command: |
            query=$(sfdx force:data:soql:query -t -q "SELECT SubscriberpackageVersionId FROM Package2Version WHERE Package2Id = '$PACKAGE_ID' ORDER BY CreatedDate DESC LIMIT 1" -u $USERNAME_PRODUCTION)
            SUBSCRIBER_PACKAGE_VERSION_ID=$(echo $query | grep -o '04t[a-zA-Z0-9]*')
            echo "Installing latest package version: $SUBSCRIBER_PACKAGE_VERSION_ID ..."
            sfdx force:package:install -w 10 -b 10 -u $USERNAME_STAGING -p $SUBSCRIBER_PACKAGE_VERSION_ID -k $INSTALLATION_KEY -r
      - run:
          name: Run Tests (Staging)
          command: |
            mkdir -p ~/test-results/apex
            export SFDX_IMPROVED_CODE_COVERAGE="true"
            sfdx force:apex:test:run -u $USERNAME_STAGING -w 10 -r junit -d ~/test-results/apex -c
      - run:
          name: Clean Duplicate Test Results
          command: |
            rm -f ~/test-results/apex/test-result.xml
          when: always
      - store_test_results:
          path: ~/test-results

  build_and_install_production:
    executor:
      name: sfdx-default
    steps:
      - checkout
      - sfdx/install
      - run:
          name: Setup SFDX CLI
          command: |
            echo $SFDX_JWT_KEY | base64 --decode --ignore-garbage > ./server.key
            sfdx auth:jwt:grant --clientid $SFDX_CONSUMER_KEY --jwtkeyfile server.key --username $USERNAME_PRODUCTION
            sfdx auth:jwt:grant --clientid $SFDX_CONSUMER_KEY_STAGING --jwtkeyfile server.key --username $USERNAME_STAGING --instanceurl https://test.salesforce.com
            mkdir -p force-app
      - run:
          name: Build Production Package
          command: |
            sfdx force:package:version:create -p $PACKAGE_ID -v $USERNAME_PRODUCTION -w 60 -k $INSTALLATION_KEY -c
      - run:
          name: Install Package (Staging)
          command: |
            query=$(sfdx force:data:soql:query -t -q "SELECT SubscriberpackageVersionId FROM Package2Version WHERE Package2Id = '$PACKAGE_ID' ORDER BY CreatedDate DESC LIMIT 1" -u $USERNAME_PRODUCTION)
            SUBSCRIBER_PACKAGE_VERSION_ID=$(echo $query | grep -o '04t[a-zA-Z0-9]*')
            echo "Installing latest package version: $SUBSCRIBER_PACKAGE_VERSION_ID ..."
            sfdx force:package:install -w 10 -b 10 -u $USERNAME_STAGING -p $SUBSCRIBER_PACKAGE_VERSION_ID -k $INSTALLATION_KEY -r
      - run:
          name: Promote Latest Build
          command: |
            query=$(sfdx force:data:soql:query -t -q "SELECT SubscriberpackageVersionId FROM Package2Version WHERE Package2Id = '$PACKAGE_ID' ORDER BY CreatedDate DESC LIMIT 1" -u $USERNAME_PRODUCTION)
            SUBSCRIBER_PACKAGE_VERSION_ID=$(echo $query | grep -o '04t[a-zA-Z0-9]*')
            echo "Promoting latest package version: $SUBSCRIBER_PACKAGE_VERSION_ID ..."
            sfdx force:package:version:promote -v $USERNAME_PRODUCTION -p $SUBSCRIBER_PACKAGE_VERSION_ID -n
      - run:
          name: Install Package (Production)
          command: |
            query=$(sfdx force:data:soql:query -t -q "SELECT SubscriberpackageVersionId FROM Package2Version WHERE Package2Id = '$PACKAGE_ID' ORDER BY CreatedDate DESC LIMIT 1" -u $USERNAME_PRODUCTION)
            SUBSCRIBER_PACKAGE_VERSION_ID=$(echo $query | grep -o '04t[a-zA-Z0-9]*')
            echo "Installing latest package version: $SUBSCRIBER_PACKAGE_VERSION_ID ..."
            sfdx force:package:install -w 10 -b 10 -u $USERNAME_PRODUCTION -p $SUBSCRIBER_PACKAGE_VERSION_ID -k $INSTALLATION_KEY -r
      - run:
          name: Run Tests (Production)
          command: |
            mkdir -p ~/test-results/apex
            export SFDX_IMPROVED_CODE_COVERAGE="true"
            sfdx force:apex:test:run -u $USERNAME_PRODUCTION -w 10 -r junit -d ~/test-results/apex -c
      - run:
          name: Clean Duplicate Test Results
          command: |
            rm -f ~/test-results/apex/test-result.xml
          when: always
      - store_test_results:
          path: ~/test-results
           
workflows:
  package_build:
    jobs:
      - scratch_org_test:
          context:
            - salesforce
      - approve_staging:
          type: approval
          requires:
            - scratch_org_test
          filters:
            branches:
              only:
                - /^version/.*/
                - /^feature/.*/
      - build_and_install_staging:
          context:
            - salesforce
          requires:
            - approve_staging
          filters:
            branches:
              only:
                - /^version/.*/
                - /^feature/.*/
      - approve_production:
          type: approval
          requires:
            - build_and_install_staging
          filters:
            branches:
              only:
                - /^version/.*/
      - build_and_install_production:
          context:
            - salesforce
          requires:
            - approve_production
          filters:
            branches:
              only:
                - /^version/.*/
